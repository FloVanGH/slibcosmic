import { Settings } from "../styling/styling.slint";

component ScrollBar inherits Rectangle {
    private property <length> offset: 8px;
    private property <length> size: 4px;
    private property <length> track-size: root.horizontal ? root.width - 2 * root.offset : root.height - 2 * offset;

    in-out property <bool> horizontal;
    in-out property<length> maximum;
    in-out property<length> page-size;
    in-out property<length> value;
    in property <bool> enabled;

    border-width: 1px;
    border-radius: 7px;

    i-thumb := Rectangle {
        width: !root.horizontal ? root.size : root.maximum <= 0phx ? 0phx : max(32px, root.track-size * root.page-size / (root.maximum + root.page-size));
        height: root.horizontal ? root.size : root.maximum <= 0phx ? 0phx : max(32px, root.track-size * (root.page-size / (root.maximum + root.page-size)));
        x: !root.horizontal ? (parent.width - self.width) / 2 : root.offset + (root.track-size - i-thumb.width) * (-root.value / root.maximum);
        y: root.horizontal ? (parent.height - self.height) / 2 : root.offset + (root.track-size - i-thumb.height) * (-root.value / root.maximum);
        border-radius: 4px;
        // FIXME: Use brushes from palette
        background: Settings.dark-color-scheme ? #E4E4E4CC : #272727CC;
        border-color: Settings.dark-color-scheme ? #27272733 : #E4E4E433;
        border-width: 1px;
    }

    i-touch-area := TouchArea {
        property <length> pressed-value;

        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                self.pressed-value = -root.value;
            }
        }

        moved => {
            if (self.enabled && self.pressed) {
                root.value = -max(0px, min(root.maximum, self.pressed-value + (
                    root.horizontal ? (i-touch-area.mouse-x - i-touch-area.pressed-x) * (root.maximum / (root.track-size - i-thumb.width))
                               : (i-touch-area.mouse-y - i-touch-area.pressed-y) * (root.maximum / (root.track-size - i-thumb.height))
                )));
            }
        }
    }

    states [
        hover when i-touch-area.has-hover : {
            root.size: 6px;
        }
    ]

    animate size { duration: 150ms; easing: ease-out; }
}

export component ScrollView {
    in property <bool> enabled: true;
    out property <length> visible-width <=> i-flickable.width;
    out property <length> visible-height <=> i-flickable.height;
    in-out property <length> viewport-width <=> i-flickable.viewport-width;
    in-out property <length> viewport-height <=> i-flickable.viewport-height;
    in-out property <length> viewport-x <=> i-flickable.viewport-x;
    in-out property <length> viewport-y <=> i-flickable.viewport-y;

    min-height: 50px;
    min-width: 50px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    i-flickable := Flickable {
        x: 2px;
        y: 2px;
        interactive: false;
        viewport-y <=> i-vertical-bar.value;
        viewport-x <=> i-horizontal-bar.value;
        width: parent.width - i-vertical-bar.width;
        height: parent.height - i-horizontal-bar.height;

        @children
    }

    i-vertical-bar := ScrollBar {
        enabled: root.enabled;
        width: 14px;
        x: i-flickable.width + i-flickable.x;
        y: i-flickable.y;
        height:  i-flickable.height;
        horizontal: false;
        maximum:  i-flickable.viewport-height - i-flickable.height;
        page-size:  i-flickable.height;
        visible: i-flickable.viewport-height > i-flickable.height;
    }

    i-horizontal-bar := ScrollBar {
        enabled: root.enabled;
        width:  i-flickable.width;
        height: 14px;
        y: i-flickable.height + i-flickable.y;
        x: i-flickable.x;
        horizontal: true;
        maximum:  i-flickable.viewport-width - i-flickable.width;
        page-size:  i-flickable.width;
        visible: i-flickable.viewport-width > i-flickable.width;
    }
}