import { Body, ExtendedTouchArea } from "../components/components.slint";
import { IconButton } from "button.slint";
import { Brushes, Palette, Settings, Icons, Typography } from "../styling/styling.slint";

export component SpinBox {
    in property <int> minimum;
    in property <int> maximum: 9;
    in property <bool> enabled <=> i-text-input.enabled;
    out property <bool> has-focus <=> i-text-input.has-focus;
    in-out property <int> value;

    forward-focus: i-text-input;
    min-width: max(94px, i-layout.min-width);
    min-height: max(32px, i-layout.min-height);
    horizontal-stretch: 1;
    vertical-stretch: 0;
    accessible-role: spinbox;
    accessible-value: root.value;
    accessible-value-minimum: root.minimum;
    accessible-value-maximum: root.maximum;
    accessible-value-step: (root.maximum - root.minimum) / 100;

    // focus border
    if (root.has-focus) : Rectangle {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        width: root.width + 8px;
        height: root.height + 8px;
        border-width: 1px;
        border-color: Brushes.accent-color;
        border-radius: i-state-layer.border-radius + 5px;
    }

    i-state-layer := Rectangle {
        border-radius: 16px;
        forward-focus: i-text-input;

        i-layout := HorizontalLayout {
            i-minus-button := IconButton {
                leading-icon: Icons.minus;
                forward-focus: i-text-input;
                enabled: root.enabled;

                clicked => {
                    root.decrement();
                }
            }

            Rectangle {
                i-text-input := TextInput {
                    min-width: 30px;
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    color: Palette.neutral-9;
                    font-size: 18px;
                    font-weight: Typography.regular-font-weight;
                    font-family: Typography.default-font-family;
                    text: root.value;

                    edited => {
                        if (self.text.is-float() && self.text.to-float() <= root.minimum && self.text.to-float() <= root.maximum) {
                            root.value = self.text.to-float();
                            return;
                        }

                        self.text = root.value;
                    }
                }

                i-touch-area := TouchArea {
                    enabled: root.enabled;
                    clicked => {
                        i-text-input.focus();
                    }
                }
            }

            i-plus-button := IconButton {
                leading-icon: Icons.plus;
                forward-focus: i-text-input;
                enabled: root.enabled;

                clicked => {
                    root.increment();
                }
            }
        }
    }

    function update-value(value: int) {
        if (value < root.minimum || value > root.maximum) {
            return;
        }

        root.value = value;
    }

    function increment() {
        i-text-input.focus();
        root.update-value(root.value + 1);
        root.update-text();
    }

    function decrement() {
        i-text-input.focus();
        root.update-value(root.value - 1);
        root.update-text();
    }

    function update-text() {
        i-text-input.text = root.value;
    }

    states [
        disabled when !root.enabled : {
            root.opacity: 0.5;
        }
        hover when i-minus-button.has-hover || i-plus-button.has-hover || i-touch-area.has-hover : {
            i-state-layer.background: Brushes.hover-state-color;
        }
    ]
}