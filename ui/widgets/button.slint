import { Body, ExtendedTouchArea, Icon } from "../components/components.slint";
import { Brushes, Palette, Settings, Icons, Images } from "../styling/styling.slint";

component ButtonBase inherits ExtendedTouchArea {
    in property <string> text;
    in property <image> leading-icon;
    in property <image> trailing-icon;
    in property <brush> content-color;

    horizontal-stretch: 0;
    vertical-stretch: 0;
    border-radius: 16px;
    min-height: max(32px, i-layout.min-height);
    min-width: self.min-height;
    padding-left: 16px;
    padding-right: 16px;

    i-layout := HorizontalLayout {
        padding-left: root.padding-left;
        padding-right: root.padding-right;
        spacing: 4px;
        alignment: center;

        if (root.leading-icon.width > 0 && root.leading-icon.height > 0) : Icon {
            y: (parent.height - self.height) / 2;
            icon: root.leading-icon;
            color: root.content-color;
        }

        if (root.text != "") : Body {
            horizontal-alignment: center;
            vertical-alignment: center;
            text: root.text;
            color: root.content-color;
        }

        if (root.trailing-icon.width > 0 && root.trailing-icon.height > 0) : Icon {
            y: (parent.height - self.height) / 2;
            icon: root.trailing-icon;
            color: root.content-color;
        }
    }
}

export component PrimaryButton {
    callback clicked <=> i-button-base.clicked;

    in property <bool> enabled <=> i-button-base.enabled;
    in property <string> text <=> i-button-base.text;
    in property <bool> destructive;
    out property <bool> has-focus <=> i-button-base.has-focus;
    out property <bool> pressed <=> i-button-base.pressed;

    min-height: i-button-base.min-height;
    horizontal-stretch: i-button-base.horizontal-stretch;
    vertical-stretch: i-button-base.vertical-stretch;
    forward-focus: i-button-base;
    accessible-role: button;
    accessible-label <=> i-button-base.text;

    i-button-base := ButtonBase {
        background: root.destructive ? Brushes.destructive-color : Brushes.accent-color;
        content-color: Brushes.on-accent-color;
    }
}

export component StandardButton {
    callback clicked <=> i-button-base.clicked;

    in property <bool> enabled <=> i-button-base.enabled;
    in property <string> text <=> i-button-base.text;
    out property <bool> has-focus <=> i-button-base.has-focus;
    out property <bool> pressed <=> i-button-base.pressed;

    horizontal-stretch: i-button-base.horizontal-stretch;
    vertical-stretch: i-button-base.vertical-stretch;
    forward-focus: i-button-base;
    accessible-role: button;
    accessible-label <=> i-button-base.text;
    min-width: i-button-base.min-width;
    min-height: i-button-base.min-height;

    i-button-base := ButtonBase {
        // FIXME: correct color mapping
        background: Settings.dark-color-scheme ? #AEAEAE40 : #5D5D5D40;
        content-color: Palette.neutral-9;
    }
}

export component TextButton {
    callback clicked <=> i-button-base.clicked;

    in property <string> text <=> i-button-base.text;
    in property <image> icon <=> i-button-base.trailing-icon;
    in property <bool> destructive;
    in property <bool> enabled <=> i-button-base.enabled;
    out property <bool> has-focus <=> i-button-base.has-focus;
    out property <bool> pressed <=> i-button-base.pressed;

    horizontal-stretch: i-button-base.horizontal-stretch;
    vertical-stretch: i-button-base.vertical-stretch;
    forward-focus: i-button-base;
    accessible-role: button;
    accessible-label <=> i-button-base.text;
    min-width: i-button-base.min-width;
    min-height: i-button-base.min-height;

    i-button-base := ButtonBase {
        // FIXME: correct color mapping
        content-color: root.destructive ? Brushes.destructive-color : Brushes.accent-text-color;
    }
}

export component IconButton {
    callback clicked;
    callback toggled(bool /* checked */);

    in property <string> text <=> i-button-base.text;
    in property <image> leading-icon <=> i-button-base.leading-icon;
    in property <image> trailing-icon <=> i-button-base.trailing-icon;
    in property <bool> enabled <=> i-button-base.enabled;
    in property <bool> checkable;
    in property <bool> primary;
    out property <bool> has-focus <=> i-button-base.has-focus;
    out property <bool> pressed <=> i-button-base.pressed;
    out property <bool> has-hover <=> i-button-base.has-hover;
    in-out property <bool> checked <=> i-button-base.selected;

    horizontal-stretch: i-button-base.horizontal-stretch;
    vertical-stretch: i-button-base.vertical-stretch;
    forward-focus: i-button-base;
    accessible-role: button;
    accessible-label <=> i-button-base.text;
    min-width: i-button-base.min-width;
    min-height: i-button-base.min-height;

    i-button-base := ButtonBase {
        // FIXME: correct color mapping
        content-color: root.checked || root.primary ? Brushes.accent-text-color : Brushes.on-primary-container-color;
        padding-left: 8px;
        padding-right: 8px;

        clicked => {
            if (root.checkable) {
                root.checked = !root.checked;
                root.toggled(root.checked);
            }

            root.clicked();
        }
    }
}

component CloseButton {
    callback clicked <=> i-touch-area.clicked;

    min-width: 24px;
    min-height: 24px;
    horizontal-stretch: 0;
    vertical-stretch: 0;
    forward-focus: i-focus-scope;

    i-background := Rectangle {
        border-radius: self.width / 2;
        background: Palette.neutral-3;

        Image {
            source: Icons.close;
            colorize: Palette.neutral-9;
        }

        i-border := Rectangle {
            width: 100%;
            height: 100%;
            border-radius: parent.border-radius;
        }
    }

    Rectangle {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: parent.width + 6px;
        height: parent.height + 6px;
        border-radius: self.width / 2           ;
        border-width: 1px;
        border-color: i-focus-scope.has-focus ? Brushes.accent-color : transparent;
    }

    i-touch-area := TouchArea {}

    i-focus-scope := FocusScope {
        x: 0;
        width: 0px; // Do not react on clicks

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                i-touch-area.clicked();
                return accept;
            }
            return reject;
        }
    }

    states [
        pressed when i-touch-area.pressed : {
            i-border.background: Settings.dark-color-scheme ? #00000033 : #FFFFFF33;
        }
        hover when i-touch-area.has-hover : {
            i-border.background: Settings.dark-color-scheme ?  #0000001A : #FFFFFF1A;
        }
    ]
}

export component ImageButton {
    callback toggled(/* checked */ bool);
    callback clicked;
    callback closed;

    in property <image> source: Settings.dark-color-scheme ? Images.image-placeholder-dark : Images.image-placeholder-light;
    in property <bool> enabled <=> i-touch-area.enabled;
    in property <bool> checkable;
    in property <bool> closeable;
    out property <bool> has-focus <=> i-focus-scope.has-focus;
    out property <bool> pressed <=> i-touch-area.pressed;
    out property <bool> has-hover <=> i-touch-area.has-hover;
    in-out property <bool> checked;

    min-width: 120px;
    min-height: 80px;
    horizontal-stretch: 0;
    vertical-stretch: 0;
    forward-focus: i-focus-scope;

    i-background := Rectangle {
        border-radius: 8px;
        clip: true;
        border-width: 1px;
        border-color: root.checked ? Brushes.accent-color : transparent;

        Image {
            source: root.source;
            width: 100%;
            height: 100%;
        }

        if (root.checked) : Rectangle {
            x: 0;
            y: parent.height - self.height;
            width: 24px;
            height: 20px;
            border-radius: 8px;
            background: Palette.neutral-3;

            Rectangle {
                x: 0;
                y: 0;
                width: parent.border-radius;
                height: 100%;
                background: parent.background;
            }

            Rectangle {
                y: parent.height - self.height;
                width: 100%;
                height: parent.border-radius;
                background: parent.background;
            }

            Icon {
                icon: Icons.checkmark;
                color: Brushes.accent-color;
            }
        }
    }

    i-border := Rectangle {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: parent.width + 6px;
        height: parent.height + 6px;
        border-radius: 10px;
        border-width: 1px;
        border-color: i-focus-scope.has-focus ? Brushes.accent-color : transparent;
    }

    i-touch-area := TouchArea {
        clicked => {
            if (root.checkable) {
                root.checked = !root.checked;
                root.toggled(root.checked);
            }

            root.clicked();
        }
    }

    i-focus-scope := FocusScope {
        x: 0;
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                i-touch-area.clicked();
                return accept;
            }
            return reject;
        }
    }

    if (root.closeable) : CloseButton {
        x: parent.width - self.width + 8px;
        y: -8px;

        clicked => {
            root.closed();
        }
    }

    states [
        disabled when !root.enabled : {
            root.opacity: 0.5;
        }
        pressed when i-touch-area.pressed : {
            i-border.background: Brushes.pressed-state-color;
        }
        hover when i-touch-area.has-hover : {
            i-border.background: Brushes.hover-state-color;
        }
    ]
}